<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	initialize="init()">
	
<mx:Script>
	<![CDATA[

		private const margin:int = 50;
		private const offset:int = 45;

		private var _cellWidth:int;
		private var _cellHeight:int;
		private var _redPieces:Array = new Array(16);
		private var _blackPieces:Array = new Array(16);
		private var _redPieceHash:Object = {};
		private var _blackPieceHash:Object = {};		
		private var _pieceMap:Array = new Array(10);
		private var _table:Table = null;
		private var _lastPieceInFocus:Piece = null;
		private var _pieceSkinIndex:int = 1;
		private var _bgColor:uint;
		private var _lineColor:uint;

		private function init() : void
		{
			_cellWidth = (width - 2 * margin)/8;
			_cellHeight = (height - 2 * margin)/9;
            
			for (var k:int = 0; k < 10; k++)
			{
				_pieceMap[k] = new Array(9);
				for (var m:int = 0; m < 9; m++)
				{
					_pieceMap[k][m] = null;
				}
			}

			// --- Create piece objects.

			var index:int = 0;
			var color:String = "Red";
			_redPieces[0] = new Piece(index++, "chariot", 9, 0, "rchariot.png", color, this);
			_redPieces[1] = new Piece(index++, "horse", 9, 1, "rhorse.png", color, this);
			_redPieces[2] = new Piece(index++, "elephant", 9, 2, "relephant.png", color, this);
			_redPieces[3] = new Piece(index++, "advisor", 9, 3, "radvisor.png", color, this);
			_redPieces[4] = new Piece(index++, "king", 9, 4, "rking.png", color, this);
			_redPieces[5] = new Piece(index++, "advisor", 9, 5, "radvisor.png", color, this);
			_redPieces[6] = new Piece(index++, "elephant", 9, 6, "relephant.png", color, this);
			_redPieces[7] = new Piece(index++, "horse", 9, 7, "rhorse.png", color, this);
			_redPieces[8] = new Piece(index++, "chariot", 9, 8, "rchariot.png", color, this);
			_redPieces[9] = new Piece(index++, "cannon", 7, 1, "rcannon.png", color, this);
			_redPieces[10] = new Piece(index++, "cannon", 7, 7, "rcannon.png", color, this);

  			for (var pawn:int = 0; pawn < 5; pawn++) {
	        	_redPieces[11 + pawn] = new Piece(index++, "pawn", 6, 2*pawn, "rpawn.png", color, this);
			}
			
			index = 0;
			color = "Black";
			_blackPieces[0] = new Piece(index++, "chariot", 0, 0, "bchariot.png", color, this);
			_blackPieces[1] = new Piece(index++, "horse", 0, 1, "bhorse.png", color, this);
			_blackPieces[2] = new Piece(index++, "elephant", 0, 2, "belephant.png", color, this);
			_blackPieces[3] = new Piece(index++, "advisor", 0, 3, "badvisor.png", color, this);
			_blackPieces[4] = new Piece(index++, "king", 0, 4, "bking.png", color, this);
			_blackPieces[5] = new Piece(index++, "advisor", 0, 5, "badvisor.png", color, this);
			_blackPieces[6] = new Piece(index++, "elephant", 0, 6, "belephant.png", color, this);
			_blackPieces[7] = new Piece(index++, "horse", 0, 7, "bhorse.png", color, this);
			_blackPieces[8] = new Piece(index++, "chariot", 0, 8, "bchariot.png", color, this);
			_blackPieces[9] = new Piece(index++, "cannon", 2, 1, "bcannon.png", color, this);
			_blackPieces[10] = new Piece(index++, "cannon", 2, 7, "bcannon.png", color, this);
	
  			for (pawn = 0; pawn < 5; pawn++) {
	        	_blackPieces[11 + pawn] = new Piece(index++, "pawn", 3, 2*pawn, "bpawn.png", color, this);
			}

 			// --- Initialize piece map.

			_pieceMap[0][0] = _blackPieces[0];
			_pieceMap[0][1] = _blackPieces[1];
			_pieceMap[0][2] = _blackPieces[2];
			_pieceMap[0][3] = _blackPieces[3];
			_pieceMap[0][4] = _blackPieces[4];
			_pieceMap[0][5] = _blackPieces[5];
			_pieceMap[0][6] = _blackPieces[6];
			_pieceMap[0][7] = _blackPieces[7];
			_pieceMap[0][8] = _blackPieces[8];
			_pieceMap[2][1] = _blackPieces[9];
			_pieceMap[2][7] = _blackPieces[10];
			for (pawn = 0; pawn < 5; pawn++) {
	        	_pieceMap[3][2*pawn] = _blackPieces[11 + pawn];
			}

			_pieceMap[9][0] = _redPieces[0];
			_pieceMap[9][1] = _redPieces[1];
			_pieceMap[9][2] = _redPieces[2];
			_pieceMap[9][3] = _redPieces[3];
			_pieceMap[9][4] = _redPieces[4];
			_pieceMap[9][5] = _redPieces[5];
			_pieceMap[9][6] = _redPieces[6];
			_pieceMap[9][7] = _redPieces[7];
			_pieceMap[9][8] = _redPieces[8];
			_pieceMap[7][1] = _redPieces[9];
			_pieceMap[7][7] = _redPieces[10];
			for (pawn = 0; pawn < 5; pawn++) {
	        	_pieceMap[6][2*pawn] = _redPieces[11 + pawn];
			}
			_redPieceHash["king"] = [];
			_redPieceHash["king"][0] = _redPieces[4];
			_redPieceHash["chariot"] = [];
			_redPieceHash["chariot"][0] = _redPieces[0];
			_redPieceHash["chariot"][1] = _redPieces[8];
			_redPieceHash["horse"] = [];
			_redPieceHash["horse"][0] = _redPieces[1];
			_redPieceHash["horse"][1] = _redPieces[7];
			_redPieceHash["elephant"] = [];
			_redPieceHash["elephant"][0] = _redPieces[2];
			_redPieceHash["elephant"][1] = _redPieces[6];
			_redPieceHash["advisor"] = [];
			_redPieceHash["advisor"][0] = _redPieces[3];
			_redPieceHash["advisor"][1] = _redPieces[5];
			_redPieceHash["cannon"] = [];
			_redPieceHash["cannon"][0] = _redPieces[9];
			_redPieceHash["cannon"][1] = _redPieces[10];
			_redPieceHash["pawn"] = [];
			for (var i:int = 0; i < 5; i++) {
				_redPieceHash["pawn"][i] = _redPieces[11 + i];
			}
			_blackPieceHash["king"] = [];
			_blackPieceHash["king"][0] = _blackPieces[4];
			_blackPieceHash["chariot"] = [];
			_blackPieceHash["chariot"][0] = _blackPieces[0];
			_blackPieceHash["chariot"][1] = _blackPieces[8];
			_blackPieceHash["horse"] = [];
			_blackPieceHash["horse"][0] = _blackPieces[1];
			_blackPieceHash["horse"][1] = _blackPieces[7];
			_blackPieceHash["elephant"] = [];
			_blackPieceHash["elephant"][0] = _blackPieces[2];
			_blackPieceHash["elephant"][1] = _blackPieces[6];
			_blackPieceHash["advisor"] = [];
			_blackPieceHash["advisor"][0] = _blackPieces[3];
			_blackPieceHash["advisor"][1] = _blackPieces[5];
			_blackPieceHash["cannon"] = [];
			_blackPieceHash["cannon"][0] = _blackPieces[9];
			_blackPieceHash["cannon"][1] = _blackPieces[10];
			_blackPieceHash["pawn"] = [];
			for (i = 0; i < 5; i++) {
				_blackPieceHash["pawn"][i] = _blackPieces[11 + i];
			}
		}

		public function setTable(table:Table) : void
		{
			_table = table;
		}

		public function drawBoardAndPieces(bgColor:uint, lineColor:uint, pieceSkinIndex:int) : void
		{
			_drawBoard(bgColor, lineColor, pieceSkinIndex);
			_displayPieces();	
		}

		private function _drawBoard(bgColor:uint, lineColor:uint, pieceSkinIndex:int) : void
		{
			_pieceSkinIndex = pieceSkinIndex;
			_lineColor = lineColor;
			_bgColor = bgColor;
			this.graphics.lineStyle(2, 0xa09e9e);
			this.graphics.beginFill(bgColor);
			this.graphics.drawRect(0, 0, this.width, this.height);
			this.graphics.endFill();
			var i:int;
			for (i = 0; i < 10; i++)
			{
				_drawLine(this, offset, offset+i*_cellHeight, offset + 8*_cellWidth, offset + i*_cellHeight);
			}
	
			for (i = 0; i < 9; i++)
			{
				if (i === 0 || i === 8) {
					_drawLine(this, offset + _cellWidth * i, offset, offset + _cellWidth * i, offset + _cellHeight * 9);
				}
				else {
					_drawLine(this, offset + _cellWidth * i, offset, offset + _cellWidth * i, offset + _cellHeight * 4);
					_drawLine(this, offset + _cellWidth * i, offset + 5 * _cellHeight, offset + _cellWidth * i, offset + _cellHeight * 9);
				}
			}
	
			_drawLine(this, offset + 3*_cellWidth, offset, offset + 5*_cellWidth, offset + _cellHeight*2);
			_drawLine(this, offset + 5*_cellWidth, offset, offset + 3*_cellWidth, offset + _cellHeight*2);
			_drawLine(this, offset + 3*_cellWidth, offset + 7 * _cellHeight, offset + 5*_cellWidth, offset + _cellHeight * 9);
			_drawLine(this, offset + 5*_cellWidth, offset + 7 * _cellHeight, offset + 3*_cellWidth, offset + _cellHeight * 9);

			var offsetLeft:int = offset;
	        var offsetTop:int = offset;
			// draw row headers
			var order:String = "ascending";
			if (_table.getTopSideColor() == "Red") {
				order = "descending";
			}
			_drawHeader("row", offsetLeft, offsetTop, 10, order);
			_drawHeader("column", offsetLeft, offsetTop, 9, order);
			_drawHeader("row", offset + (_cellWidth * 9) + 15, offset, 10, order);
			_drawHeader("column", offsetLeft, offsetTop + (10 * _cellHeight) + 10, 9, order);
		}

		private function _displayPieces() : void {
			var i:int = 0;
			for (i = 0; i < 16; i++) {
				_redPieces[i].draw(this, offset, _cellWidth, _cellHeight, _pieceSkinIndex);
			}
			for (i = 0; i < 16; i++) {
				_blackPieces[i].draw(this, offset, _cellWidth, _cellHeight, _pieceSkinIndex);
			}
		}

		private function _drawLine(panel:Canvas, startX:int, startY:int, endX:int, endY:int):void
		{
			panel.graphics.lineStyle(1, _lineColor);
			panel.graphics.moveTo(startX, startY);
			panel.graphics.lineTo(endX, endY);
		}

		private function _drawHeader(type:String, offsetLeft:int, offsetTop:int, numCells:int, order:String) : void {
			var start:int = 0;
			if (order == "descending") {
				start = numCells - 1;
			}
			var left:int = offsetLeft - 40;
			var top:int = 0;
			if (type == "row") {
				for (var i:int = 0; i < numCells; i++) {
					top = offsetTop + (i * _cellHeight) - 6; 
					Util.createTextField(this, "" + start, left, top, false, _lineColor, "Verdana", 12);
					if (order == "descending") {
						start--;
					}
					else {
						start++;
					}
				}
			}
			else {
				top =  offsetTop - 40;
				for (var j:int = 0; j < numCells; j++) {
					left = offsetLeft + (j * _cellWidth) - 6;
					Util.createTextField(this, String.fromCharCode(97 + start), left, top, false, _lineColor, "Verdana", 12);
					if (order == "descending") {
						start--;
					}
					else {
						start++;
					}
				}
			}
		}

		public function getNearestCell(x:int, y:int, radius:int):Position
		{
			var i:int;
			var j:int; 
			var yRow:int;
			var xColumn:int;
			var cell:Array;
			
			trace("x: " + x + " y: " + y);
			trace("panel mouse x: " + this.mouseX + " y: " + this.mouseY);

			for (i = 0; i < 10; i++)
			{
				yRow = offset + _cellHeight * i;
				if (Math.abs(this.mouseY-yRow) < radius)
				{
					trace("row"+i);
					break;
				}
			}
			for (j = 0; j < 9; j++)
			{
				xColumn = offset + _cellWidth * j;
				if (Math.abs(this.mouseX-xColumn) < radius)
				{					
					trace("col"+j);
					break;
				}
			}
			var pos:Position = new Position(0, 0);
			if (i >= 10 || j >= 9) {
				pos.row = pos.column = -1;
			}
			else {
				pos.row = i;
				pos.column = j;
			}
			return pos;
		}

		public function getX(column:int) : int {
			return offset + column * _cellWidth;
		}

		public function getY(row:int) : int {
			return offset + row * _cellHeight;
		}
		public function getPieceByPos(pos:Position):Piece
		{
			return _pieceMap[pos.row][pos.column];
		}
		public function getPiece(color:String, type:String) : Array {
			return (color == "Red") ? _redPieceHash[type] : _blackPieceHash[type];
		}
		public function getPieceByIndex(color:String, index:String) : Piece {
			return (color === "Red" ? _redPieces[index] : _blackPieces[index]);
		}

		public function getTable():Table { return _table; }

		public function getInterveningPiece(curPos:Position, newPos:Position) : int
		{
			var numPieces:int = 0;
			var newRow:int = newPos.row;
			var newCol:int = newPos.column;
			var curRow:int = curPos.row;
			var curCol:int = curPos.column;
			var rowDiff:int = Math.abs(curRow - newRow);
			var colDiff:int = Math.abs(curCol - newCol);
			var move:int = 0;
			if (rowDiff > 0) {
				if (colDiff > 0) {
					if ((rowDiff === 1 && colDiff === 2) || (rowDiff === 2 && colDiff === 1)) {
						move = 3; // L shape move
					} else if (rowDiff === colDiff) {
						move = 2; // Diagnol move
					} else {
						move = 4; // Steep move
					}
				} else {
					move = 1; // Vertical move
				}
			} else {
				move = 0; // Horizontal move
			}
			var startCol:int = curCol;
			if (curCol > newCol) {
				startCol = newCol;
			}
			var startRow:int = curRow;
			if (curRow > newRow) {
				startRow = newRow;
			}
			var i:int = 0;
			if (move === 0) {
				for (i = 1; i < colDiff; i++) {
					if (_pieceMap[curRow][startCol + i] !== null) {
						numPieces++;
					}
				}
			} else if (move === 1) {
				for (i = 1; i < rowDiff; i++) {
					if (_pieceMap[startRow + i][curCol] !== null) {
						numPieces++;
					}
				}
			} else if (move === 2) {
				if (curRow < newRow) {
					for (i = 1; i < rowDiff; i++) {
						if (curCol < newCol) {
							if (_pieceMap[curRow + i][curCol + i] !== null) {
								numPieces++;
							}
						} else {
							if (_pieceMap[curRow + i][curCol - i] !== null) {
								numPieces++;
							}
						}
					}
				} else {
					for (i = 1; i < rowDiff; i++) {
						if (curCol < newCol) {
							if (_pieceMap[curRow - i][curCol + i] !== null) {
								numPieces++;
							}
						} else {
							if (_pieceMap[curRow - i][curCol - i] !== null) {
								numPieces++;
							}
						}
					}
				}
			}  else if (move === 3) {
				if (rowDiff === 1 && colDiff === 2) {
					if (curCol > newCol) {
						if (_pieceMap[curRow][curCol - 1] !== null) {
							numPieces++;
						}
					} else {
						if (_pieceMap[curRow][curCol + 1] !== null) {
							numPieces++;
						}
					}
				} else {
					if (curRow > newRow) {
						if (_pieceMap[curRow - 1][curCol] !== null) {
							numPieces++;
						}
					} else {
						if (_pieceMap[curRow + 1][curCol] !== null) {
							numPieces++;
						}
					}
				}
			}

			return numPieces;
		}		
		
		public function isMySide(color:String, pos:Position):Boolean
		{
			if (color === "Black") {
				if (pos.row < 5) {
					return true;
				}
			}
			else {
				if (pos.row >= 5) {
					return true;
				}
			}
			return false;
		}
		
		public function updatePieceMapState(piece:Piece, oldPos:Position, newPos:Position) : void
		{
			_pieceMap[newPos.row][newPos.column] = piece;
			_pieceMap[oldPos.row][oldPos.column] = null;
		}

		public function updatePieceMap(newPos:Position, piece:Piece) : void
		{
			var curPiece:Piece = _pieceMap[newPos.row][newPos.column];
			var oldPos:Position = piece.getPosition();
			_pieceMap[newPos.row][newPos.column] = piece;
			_pieceMap[oldPos.row][oldPos.column] = null;
			if (curPiece) {
				curPiece.setCapture(true);
				curPiece.removeImage(this);
			}
			piece.setPosition(newPos);
		}
		public function setFocusOnPiece(piece:Piece) : void {
			if (_lastPieceInFocus) {
				_lastPieceInFocus.clearFocus();
				_lastPieceInFocus = null;
			}
			if (piece) {
				piece.setFocus();
				_lastPieceInFocus = piece;
			}
		}

		public function movePieceByPos(piece:Piece, newPos:Position, moveImage:Boolean) : void {
			updatePieceMap(newPos, piece);
			if (moveImage) {
				piece.moveImage();
				if (_lastPieceInFocus) {
					_lastPieceInFocus.clearFocus();
				}
				piece.setFocus();
			}
			_lastPieceInFocus = piece;
		}
		public function rewindPieceByPos(piece:Piece, curPos:Position, prevPos:Position, capturedPiece:Piece) : void {
			_pieceMap[prevPos.row][prevPos.column] = piece;
			_pieceMap[curPos.row][curPos.column] = capturedPiece;
			if (_lastPieceInFocus) {
				_lastPieceInFocus.clearFocus();
			}
			piece.setPosition(prevPos);
			piece.moveImage();
			if (capturedPiece) {
				capturedPiece.setCapture(false);
				capturedPiece.setPosition(curPos);
				capturedPiece.draw(this, offset, _cellWidth, _cellHeight, _pieceSkinIndex);
				capturedPiece.setFocus();
				_lastPieceInFocus = capturedPiece;
			}
			else {
				piece.setFocus();
				_lastPieceInFocus = piece;
			}
		}

		private function _isNormalView() : Boolean {
			return (_table.getBottomSideColor() === "Black");
		}
		
		public function getViewPosition(pos:Position) : Position {
			if (_isNormalView()) {
				var tRow:int = Math.abs(pos.row - 9);
				var tColumn:int = Math.abs(pos.column - 8);
				return new Position(tRow, tColumn);
			}
			return new Position(pos.row, pos.column);
		}

		public function getAbsolutePosition(pos:Position) : Position {
			if (_isNormalView()) {
				var tRow:int = Math.abs(pos.row - 9);
				var tColumn:int = Math.abs(pos.column - 8);
				return new Position(tRow, tColumn);
			}
			return new Position(pos.row, pos.column);
		}

		public function displayStatus(status:String) : void {
			Util.createTextField(this, status, this.getX(1), this.getY(4) + 10, false, 0x33CCFF, "Verdana", 18);
		}

		public function enableEvents(color:String) : void {
			var i:int;
			if (color == "Red") {
				for (i = 0; i < 16; i++) {
					_redPieces[i].enableEvents();
				}
			}
			else {
				for (i = 0; i < 16; i++) {
					_blackPieces[i].enableEvents();
				}
			}
		}

		public function disableEvents(color:String) : void {
			var i:int;
			if (color == "Red") {
				for (i = 0; i < 16; i++) {
					_redPieces[i].disableEvents();
				}
			}
			else {
				for (i = 0; i < 16; i++) {
					_blackPieces[i].disableEvents();
				}
			}			
		}

		public function reDraw(changeSet:Array, focusPiece:Piece) : void {
			if (changeSet == null || changeSet.length == 0) {
				return;
			}
			var i:int = 0;
			var piece:Piece = null;
			var captured:Boolean = false;
			var pos1:Position = null;
			var pos2:Position = null;
			var color:String = "";
			var index:int = 0;
			for (var j:int = 0; j < changeSet.length; j++) {
				color = changeSet[j][0];
				index = parseInt(changeSet[j][1]);
				if (color == "Red") {
					piece = _redPieces[index];
				}
				else {
					piece = _blackPieces[index];
				}
				captured = changeSet[j][4];
				pos1 = piece.getPosition();
				pos2 = new Position(parseInt(changeSet[j][2]), parseInt(changeSet[j][3]));
				if (!captured) {
					if (piece.isCaptured()) {
						piece.setPosition(pos2);
						piece.draw(this, offset, _cellWidth, _cellHeight, _pieceSkinIndex);
						if (piece.isEventsEnabled()) {
							piece.enableEvents();
						}
					}
					else {
						if (pos1.Compare(pos2) != 0) {
							piece.removeImage(this);
							piece.setPosition(pos2);
							piece.draw(this, offset, _cellWidth, _cellHeight, _pieceSkinIndex);
							if (piece.isEventsEnabled()) {
								piece.enableEvents();
							}
						}
					}
					piece.setCapture(false);
				} else {
					if (!piece.isCaptured()) {
						piece.removeImage(this);
					}
					piece.setPosition(pos2);
					piece.setCapture(true);
				}
			}
			if (focusPiece != null) {
				if (_lastPieceInFocus) {
					_lastPieceInFocus.clearFocus();
				}
				focusPiece.setFocus();
				_lastPieceInFocus = focusPiece;
			}
		}

		public function restoreState() : void {
			var i:int = 0;
			var piece:Piece = null;
			var pos1:Position = null;
			var pos2:Position = null;
			for (i = 0; i < _redPieces.length; i++) {
				piece = _redPieces[i];
				pos1 = piece.getPosition();
				if (!(piece.isCaptured())) {
					if (!(_redPieces[i].isCaptured())) {
						_redPieces[i].removeImage(this);
					}
					piece.draw(this, offset, _cellWidth, _cellHeight, _pieceSkinIndex);
					if (piece.isEventsEnabled()) {
						piece.enableEvents();
					}
				}
			}
			for (i = 0; i < _blackPieces.length; i++) {
				piece = _blackPieces[i];
				pos1 = piece.getPosition();
				if (!(piece.isCaptured())) {
					if (!(_blackPieces[i].isCaptured())) {
						_blackPieces[i].removeImage(this);
					}
					piece.draw(this, offset, _cellWidth, _cellHeight, _pieceSkinIndex);
					if (piece.isEventsEnabled()) {
						piece.enableEvents();
					}
				}
			}
		}
		
		public function getPieceMapInfo() : String {
			var result:String = "piecemap: \n";
			var line:String = "";
			var piece:Piece = null;
			var k:int = 0;
			var m:int = 0;
			var pos:Position = null;
			for(k = 0; k < 10; k++)
			{
				for(m = 0; m < 9; m++)
				{
					piece = _pieceMap[k][m];
					if (piece != null) {
						pos = piece.getPosition();
						line = pos.toString() + ": " + piece.getColor() + " " + piece.getType() + "\n";
						result += line;
					}
				}
			}
			return result;
		}
		
		public function getRedPiecesInfo() : String {
			var result:String = "redpieces: \n";
			var line:String = "";
			var piece:Piece = null;
			var pos:Position = null;
			for (var i:int = 0; i < _redPieces.length; i++) {
				piece = _redPieces[i];
				pos = piece.getPosition();
				line = "" + piece.getType() + " " + pos.toString() + " " + (piece.isCaptured() ? "captured" : "")  + "\n";
				result += line;
			}
			return result;
		}

		public function getBlackPiecesInfo() : String {
			var result:String = "blackpieces: \n";
			var line:String = "";
			var piece:Piece = null;
			var pos:Position = null;
			for (var i:int = 0; i < _blackPieces.length; i++) {
				piece = _blackPieces[i];
				pos = piece.getPosition();
				line = "" + piece.getType() + " " + pos.toString() + " " + (piece.isCaptured() ? "captured" : "")  + "\n";
				result += line;
			}
			return result;
		}
		
		public function changePiecesSkin(skinIndex:int) : void
		{
			_pieceSkinIndex = skinIndex;

			var piece:Piece = null;
			for (var i:int = 0; i < 16; i++)
			{
				piece = _redPieces[i];
				if ( ! piece.isCaptured() ) {
					_changeSkinOfPiece(piece);
				}
				piece = _blackPieces[i];
				if ( ! piece.isCaptured() ) {
					_changeSkinOfPiece(piece);
				}
			}

			if (_lastPieceInFocus) {
				_lastPieceInFocus.setFocus();
			}
		}

		private function _changeSkinOfPiece(piece:Piece) : void
		{
			piece.removeImage(this);
			if (_pieceSkinIndex == 3) {
				piece.setImageCenter(22, 28);
			} else {
				piece.setImageCenter(22, 22);
			}
			piece.draw(this, offset, _cellWidth, _cellHeight, _pieceSkinIndex);
			if (piece.isEventsEnabled()) {
				piece.enableEvents();
			}
		}

	]]>
</mx:Script>
	
</mx:Canvas>
