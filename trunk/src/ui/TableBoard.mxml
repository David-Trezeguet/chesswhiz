<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:cwui="ui.*"
	layout="horizontal" width="900" height="700"
	paddingBottom="8" paddingLeft="8" paddingRight="8" paddingTop="8"
	initialize="init()">

<mx:Script>
	<![CDATA[
		import mx.controls.Label;
		import mx.controls.Image;
		import mx.controls.DataGrid;
		import hoxserver.*;

		private static const RED_PLAYER_ICON:String   = "images/redplayer.png";
		private static const BLACK_PLAYER_ICON:String = "images/blackplayer.png";
		private static const TIMER_ICON:String        = "images/player_time.png";

		private var _table:Table;

		private function init() : void
		{
			topTimerImage.source = ChessApp.BASE_URI + "res/" + TIMER_ICON;
			bottomTimerImage.source = topTimerImage.source;
		}

		public function display(table:Table) : void
		{
			this.title = "Table #" + table.tableId;
			_table = table;
			board.setTable(_table);
			const pref:Object = _table.getPreferences();
			board.drawBoardAndPieces(pref["boardcolor"], pref["linecolor"], pref["pieceskinindex"]);
		}

		public function displayPlayerData(player:PlayerInfo) : void
		{
			var playerLabel:Label = (player.getColor() === _table.getTopSideColor() ? topLabel : bottomLabel);
			playerLabel.text = player.getPlayerID() + "(" + player.getScore() + ")";

			var playerImage:Image = (player.getColor() === _table.getTopSideColor() ? topImage : bottomImage);
			playerImage.source = ChessApp.BASE_URI + "res/"
				+ (player.getColor() == "Red" ? RED_PLAYER_ICON : BLACK_PLAYER_ICON); 
			
			var timer:GameTimers = _table.getTimers(player.getColor());
			updateTimers(player.getColor(), timer);
		}

		public function removePlayerData(color:String) : void 
		{
			var playerLabel:Label = (color === _table.getTopSideColor() ? topLabel : bottomLabel);
			playerLabel.text = "";

			// NOTE: There is not need to clear/reset the timer for now.
		}
		
		public function updateTimers(color:String, timer:GameTimers) : void
		{
			if (color === _table.getTopSideColor())
			{
				topTimerGame.text = timer.getTimer("game");
				topTimerMove.text = timer.getTimer("move");
				topTimerExtra.text = timer.getTimer("extra");
			}
			else
			{
				bottomTimerGame.text = timer.getTimer("game");
				bottomTimerMove.text = timer.getTimer("move");
				bottomTimerExtra.text = timer.getTimer("extra");
			}
		}

		public function displayMessage(msg:String) : void
		{
			this.taMessages.text += msg + "\n";		
		}

		public function reviewMove(event:Event) : void
		{
			var button:Button = Button(event.target);
			_table.reviewMove(button.name);
		}
		
		public function displayChatMessage(pid:String, chatMsg:String) : void 
		{
			this.taChat.text  += "[" + pid + "] " + chatMsg + "\n";
		}

        public function postChatMessage(event:KeyboardEvent) : void
        {
        	if (event.keyCode != Keyboard.ENTER) {
        		return;
        	}
        	var temp:String;
			var chatMsg:String = this.taChatInput.text
			if (chatMsg.charAt(chatMsg.length - 1) == "\n") {
				temp = chatMsg.substr(0, chatMsg.length - 1);
				chatMsg = temp;
			}
			if (chatMsg.charAt(chatMsg.length - 1) == "\r") {
				temp = chatMsg.substr(0, chatMsg.length - 1);
				chatMsg = temp;
			}

			if (chatMsg.search("/debug") == 0) {
				_table.handleDebugCmd(chatMsg);
				this.taChatInput.text = "";
				return;
			}
			Global.vars.app.doTableChat(chatMsg);
			this.taChatInput.text = "";
			this.displayChatMessage(Global.vars.app.getPlayerID(), chatMsg);
        }

		public function redrawBoard(boardColor:uint, lineColor:uint, pieceSkin:int) : void 
		{
			board.drawBoardAndPieces(boardColor, lineColor, pieceSkin);
			board.changePiecesSkin(pieceSkin);
			var piece:Piece = board.getFocusPiece();
			if (piece) {
				piece.setFocus();
			}
		}
		
		public function changePieceSkin(pieceSkin:int) : void 
		{
			board.changePiecesSkin(pieceSkin);
			var piece:Piece = board.getFocusPiece();
			if (piece) {
				piece.setFocus();
			}
		}

		public function enableReviewButtons(flag:Boolean) : void 
		{
			for (var i:int = 0; i < this.mcMoves.numChildren; i++) {
				if (this.mcMoves.getChildAt(i) is Button) {
					var button:Button = (Button)(this.mcMoves.getChildAt(i));
					button.enabled = flag;
				}
			}
		}

	]]>
</mx:Script>

	<mx:VBox height="100%" width="570" verticalGap="5">
	
		<mx:HBox width="100%">
			<mx:HBox id="topPlayer" width="209" height="28" verticalAlign="middle">
				<mx:Image id="topImage" scaleContent="true"/>
				<mx:Label id="topLabel" fontSize="12" color="#A09E9E"/>
			</mx:HBox>
			<mx:Spacer width="100%" />
			<mx:HBox id="topTimers" width="197" height="28" verticalAlign="middle">
				<mx:Image id="topTimerImage"/>
				<mx:Label id="topTimerGame" fontSize="12" color="#A09E9E" text="00:00"/>
				<mx:Label id="topTimerMove" fontSize="12" color="#A09E9E" text="00:00"/>
				<mx:Label id="topTimerExtra" fontSize="12" color="#A09E9E" text="00:00"/>
			</mx:HBox>
		</mx:HBox>
		
		<cwui:BoardCanvas id="board" x="10" y="48" width="550" height="550" />

		<mx:HBox width="100%">
			<mx:HBox id="bottomPlayer" width="209" height="28" verticalAlign="middle">
				<mx:Image id="bottomImage" scaleContent="true"/>
				<mx:Label id="bottomLabel" fontSize="12" color="#A09E9E"/>
			</mx:HBox>
			<mx:Spacer width="100%" />
			<mx:HBox id="bottomTimers" width="197" height="28" verticalAlign="middle">
				<mx:Image id="bottomTimerImage"/>
				<mx:Label id="bottomTimerGame" fontSize="12" color="#A09E9E" text="00:00"/>
				<mx:Label id="bottomTimerMove" fontSize="12" color="#A09E9E" text="00:00"/>
				<mx:Label id="bottomTimerExtra" fontSize="12" color="#A09E9E" text="00:00"/>
			</mx:HBox>
		</mx:HBox>
		
		<mx:HBox id="mcMoves" x="150" y="638" width="100%" horizontalGap="3">
			<mx:Spacer width="170" />
			<mx:Button name="start" label="|&lt;" enabled="false" click="reviewMove(event)" />
			<mx:Button name="rewind" label="&lt;" enabled="false" click="reviewMove(event)" />
			<mx:Button name="forward" label="&gt;" enabled="false" click="reviewMove(event)" />
			<mx:Button name="end" label="&gt;|" enabled="false" click="reviewMove(event)" />
		</mx:HBox>
	</mx:VBox>

	<mx:Spacer width="100%" />

	<mx:VBox height="100%" width="270">
		<mx:Spacer height="30" />
		<mx:Panel title="Messages" width="100%" height="242" layout="absolute">
			<mx:TextArea id="taMessages" width="100%" height="100%" editable="false" />
		</mx:Panel>

		<mx:Panel title="Chat" width="100%" height="298" layout="vertical">
			<mx:TextArea id="taChat" width="100%" height="204" editable="false"/>
			<mx:TextInput id="taChatInput" width="100%" height="40" keyDown="postChatMessage(event)" />
		</mx:Panel>
	</mx:VBox>

</mx:Panel>
