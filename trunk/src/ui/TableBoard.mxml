<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:cwui="ui.*"
	layout="horizontal" width="880" height="720"
	paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4"
	showCloseButton="true"
	creationComplete="onCreationComplete()"
	close="Global.app.doCloseTable();">

<mx:Script>
	<![CDATA[
		import mx.utils.ObjectUtil;
		import mx.managers.PopUpManager;
		import mx.controls.Label;
		import mx.controls.Image;
		import hoxserver.*;

		public static const INVALID_INDEX:int = -1;

		private var _table:Table;

		private var _redId:String    = "";
		private var _blackId:String  = "";

		private function onCreationComplete() : void
		{
			playersPanel.title        = resourceManager.getString('localization', 'Players');
			activitiesPanel.title     = resourceManager.getString('localization', 'Activities');
			messagesPanel.title       = resourceManager.getString('localization', 'Messages');
			resignButton.label        = resourceManager.getString('localization', 'Resign');
			drawButton.label          = resourceManager.getString('localization', 'Draw');
			redPlayButton.label       = resourceManager.getString('localization', 'Play_RED');
			blackPlayButton.label     = resourceManager.getString('localization', 'Play_BLACK');
			reverseViewButton.toolTip = resourceManager.getString('localization', 'Reverse_View');
			settingsButton.toolTip    = resourceManager.getString('localization', 'Table_Settings');
			resetButton.toolTip       = resourceManager.getString('localization', 'Reset_table');
		}

		public function setPreferences(table:Table, bgColor:uint, lineColor:uint, pieceSkin:int) : void
		{
			_table = table;
			board.setTable(_table);
			board.setPreferences(bgColor, lineColor, pieceSkin);
		}

		/**
		 * This function is called in the following two cases:
		 *   (1) An Empty table needs to be created ( table-ID = "").
		 *   (2) A New table needs to be setup ( table-ID != "").
		 */
		public function clearDisplay() : void
		{
			_redId = "";
			redLabel.text = "";
			_blackId = "";
			blackLabel.text = "";
			playersPanel.removeAllPlayers();
			activitiesArea.text = "";
			messagesPanel.clearPanel();

			const emptyTimers:GameTimers = new GameTimers();
			updateTimers( "Red",   emptyTimers );
			updateTimers( "Black", emptyTimers );

			_updatePlayButtons();
			board.reset();
			
			if ( _table.tableId == "" )
			{
				this.title = "";
				board.displayEmptyStatus();
				this.showCloseButton = false;
				redPlayButton.visible           = false;
				redPlayButton.includeInLayout   = false;
				blackPlayButton.visible         = false;
				blackPlayButton.includeInLayout = false;
			}
			else
			{
				this.title = "Table #" + _table.tableId;
				this.showCloseButton = true;
			}
		}

		private function _reverseView() : void
		{
			/* NOTE: Assuming that the two Player-Boxes are with
			 *       the index 0 and 2 of the main parent container.
			 */
			boardBox.setChildIndex( boardBox.getChildAt(2), 0 );
			boardBox.setChildIndex( boardBox.getChildAt(1), 2 );

			updateTimers( "Red",   _table.getTimers("Red")   );
			updateTimers( "Black", _table.getTimers("Black") );

			board.reverseView();
		}

		/**
		 * @note The player can join the Table as an observer (color = "None").
		 */
		public function onPlayerJoined(player:PlayerInfo) : void
		{
			if ( playersPanel.addPlayer(player.pid, player.score) ) // newly joined?
			{
				this.onSystemMessage(player.pid + " joined");
			}

			if ( player.color == "None" )
			{
				if ( player.pid == _redId )
				{
					_redId = "";
					redLabel.text = "";
				}
				else if ( player.pid == _blackId )
				{
					_blackId = "";
					blackLabel.text = "";
				}
			}
			else
			{
				if ( player.color == "Red" )
				{
					_redId = player.pid;
					redLabel.text = player.pid + " (" + player.score + ")";
				}
				else   /* "Black" */
				{
					_blackId = player.pid;
					blackLabel.text = player.pid + " (" + player.score + ")"
				}

				const timer:GameTimers = _table.getTimers(player.color);
				updateTimers(player.color, timer);
			}

			_updatePlayButtons();

			// By default, make sure that if I play, my side is
			// at the bottom of the board.
			if (   Global.player.pid == _blackId && _isBlackAtTopSide()
				|| Global.player.pid == _redId && !_isBlackAtTopSide() )
			{
				_reverseView();
			}
		}

		/**
		 * Handle the event in which a player left the Table.
		 */
		public function onPlayerLeft(playerId:String) : void
		{
			if ( playersPanel.removePlayer(playerId) ) // removed from list?
			{
				this.onSystemMessage(playerId + " left");
			}

			if ( playerId == _redId )
			{
				_redId = "";
				redLabel.text = "";
			}
			else if ( playerId == _blackId )
			{
				_blackId = "";
				blackLabel.text = "";
			}

			_updatePlayButtons();
		}

		/**
		 * Handle the event in which this Table is reset..
		 */
		public function onReset() : void
		{
			updateTimers( "Red",   _table.getTimers("Red")   );
			updateTimers( "Black", _table.getTimers("Black") );
			
			_updatePlayButtons();

			board.reset();
		}

		/**
		 * This helper function determines whether the Black side is displayed
		 * at the top of the board.
		 */
		private function _isBlackAtTopSide() : Boolean
		{
			return ( boardBox.getChildIndex(blackBox) == 0 );
		}

		private function _updatePlayButtons() : void
		{
			redPlayButton.visible         = (redLabel.text == "");
			redPlayButton.includeInLayout = (redLabel.text == "");

			blackPlayButton.visible         = (blackLabel.text == "");
			blackPlayButton.includeInLayout = (blackLabel.text == "");
		}
		
		public function updateTimers(color:String, timer:GameTimers) : void
		{
			if (color == "Red")
			{
				redTimerGame.text = timer.getTimer("game");
				redTimerMove.text = timer.getTimer("move");
				redTimerExtra.text = timer.getTimer("extra");
			}
			else
			{
				blackTimerGame.text = timer.getTimer("game");
				blackTimerMove.text = timer.getTimer("move");
				blackTimerExtra.text = timer.getTimer("extra");
			}
		}

		public function onSystemMessage(msg:String) : void
		{
			activitiesArea.text += msg + "\n";		
		}

		private function onReviewButton(cmd:String) : void
		{
			_table.reviewMove(cmd);
		}

		/**
		 * @bPrivate If true, then this message is private.
		 */
		public function onBoardMessage(msg:String, senderId:String = "", bPrivate:Boolean = false) : void 
		{
			messagesPanel.onMessageFrom(senderId, msg, bPrivate);
		}

		public function onNewPlayerScore(pid:String, score:String) : void 
		{
			if ( _redId == pid ) {
				redLabel.text = pid + " (" + score + ")";
			}
			else if ( _blackId == pid ) {
				blackLabel.text = pid + " (" + score + ")";
			}
			playersPanel.addPlayer(pid, score); // Add = Update.
		}

		public function onEnterInput(event:Event) : void
		{
			const msg:String = messagesPanel.newMessage;
			Global.app.doSendMessage(msg);
		}

		public function onSettingsButton(event:Event) : void
		{
			var settingsPanel:TableSettings = new TableSettings();
			PopUpManager.addPopUp(settingsPanel, this, true /* modal */);
			PopUpManager.centerPopUp(settingsPanel);
			settingsPanel.settings = ObjectUtil.copy( _table.getSettings() );
			settingsPanel.applyCurrentSettings();
			settingsPanel.addEventListener("newSettings", newSettingsEventHandler);
		}

		public function onResignButton(event:Event) : void
		{
			Global.app.doResignTable();
		}

		public function onDrawButton(event:Event) : void
		{
			Global.app.doDrawTable();
		}

		public function onResetButton(event:Event) : void
		{
			Global.app.doResetTable();
		}

		public function onPlayButton(event:Event) : void
		{
			Global.app.doJoinTable( _table.tableId,
									( event.target == redPlayButton ? "Red" : "Black") );
		}

		/**
		 * Callback function to handle the "newSettings" event generated
		 * by the 'TableSettings' window.
		 */
		private function newSettingsEventHandler(event:Event) : void
		{
			var settingsPanel:TableSettings = event.target as TableSettings;
			if ( settingsPanel != null )
			{
				_table.updateSettings( settingsPanel.settings );
			}	
		}

		public function redrawBoard(boardColor:uint, lineColor:uint) : void 
		{
			board.drawBoard(boardColor, lineColor);
		}
		
		public function changePieceSkin(pieceSkin:int) : void 
		{
			board.changePiecesSkin(pieceSkin);
		}

		public function enableReviewButtons(flag:Boolean) : void 
		{
			startButton.enabled   = flag;
			rewindButton.enabled  = flag;
			forwardButton.enabled = flag;
			endButton.enabled     = flag;
		}

	]]>
</mx:Script>

	<mx:VBox id="boardBox" height="670" width="550" verticalGap="5" horizontalAlign="center">
	
		<mx:HBox id="blackBox" width="100%">
			<mx:HBox id="blackPlayer" width="280" height="28" verticalAlign="middle">
				<mx:Image id="blackImage" source="@Embed(source='../assets/black_player.png')"/>
				<mx:Button id="blackPlayButton" label="Play" click="onPlayButton(event)"  fontSize="12"/>
				<mx:Label id="blackLabel" fontSize="13"/>
			</mx:HBox>
			<mx:Spacer width="100%" />
			<mx:HBox id="blackTimers" width="197" height="28" verticalAlign="middle">
				<mx:Image id="blackTimerImage" source="@Embed(source='../assets/timer.png')"/>
				<mx:Label id="blackTimerGame" fontSize="12" text="00:00" fontWeight="bold" color="#2272CD"/>
				<mx:Label id="blackTimerMove" fontSize="12" text="00:00" fontWeight="bold"/>
				<mx:Label id="blackTimerExtra" fontSize="12" text="00:00" fontWeight="normal"/>
			</mx:HBox>
		</mx:HBox>
		
		<cwui:BoardCanvas id="board" x="10" y="48" width="550" height="550" />

		<mx:HBox id="redBox" width="100%">
			<mx:HBox id="redPlayer" width="280" height="28" verticalAlign="middle">
				<mx:Image id="redImage" source="@Embed(source='../assets/red_player.png')"/>
				<mx:Button id="redPlayButton" label="Play" click="onPlayButton(event)"  fontSize="12"/>
				<mx:Label id="redLabel" fontSize="13"/>
			</mx:HBox>
			<mx:Spacer width="100%" />
			<mx:HBox id="redTimers" width="197" height="28" verticalAlign="middle">
				<mx:Image id="redTimerImage" source="@Embed(source='../assets/timer.png')"/>
				<mx:Label id="redTimerGame" fontSize="12" text="00:00" fontWeight="bold" color="#2272CD"/>
				<mx:Label id="redTimerMove" fontSize="12" text="00:00" fontWeight="bold"/>
				<mx:Label id="redTimerExtra" fontSize="12" text="00:00" fontWeight="normal"/>
			</mx:HBox>
		</mx:HBox>
		
		<mx:ApplicationControlBar width="100%" fillAlphas="[1.0, 1.0]" fillColors="[#383232, #FFFFFF]">
			<mx:Image id="startButton" enabled="false" click="onReviewButton('start')"
				source="@Embed(source='../assets/go_first.png')" alpha="1.0"/>
			<mx:Image id="rewindButton" enabled="false" click="onReviewButton('rewind')"
				source="@Embed(source='../assets/go_previous.png')" alpha="1.0"/>
			<mx:Image id="forwardButton" enabled="false" click="onReviewButton('forward')"
				source="@Embed(source='../assets/go_next.png')" alpha="1.0"/>
			<mx:Image id="endButton" enabled="false" click="onReviewButton('end')"
				source="@Embed(source='../assets/go_last.png')" alpha="1.0"/>
			<mx:Spacer width="100%" />
			<mx:Button id="reverseViewButton" click="_reverseView();"
				icon="@Embed(source='../assets/reverse.png')"/>
			<mx:Button id="settingsButton" click="onSettingsButton(event)" 
				icon="@Embed(source='../assets/settings.png')"/>
			<mx:Button id="resetButton" click="onResetButton(event)" 
				icon="@Embed(source='../assets/reset.png')"/>
			<mx:Spacer width="100%" />
			<mx:Button id="resignButton" label="Resign" click="onResignButton(event)"
				icon="@Embed(source='../assets/white_flag.png')"/>
			<mx:Button id="drawButton" label="Draw" click="onDrawButton(event)"
				icon="@Embed(source='../assets/blue_flag.png')"/>
		</mx:ApplicationControlBar>
	</mx:VBox>

	<mx:Spacer width="0" />

	<mx:VBox height="100%" width="100%">
		<cwui:PlayerListPanel id="playersPanel" title="Players" width="100%" height="160"/>
		<mx:VDividedBox width="100%" height="100%">
			<mx:Panel id="activitiesPanel" title="Activities" width="100%" height="230" layout="vertical">
				<mx:TextArea id="activitiesArea" width="100%" height="100%" editable="false"
					valueCommit="activitiesArea.verticalScrollPosition=activitiesArea.maxVerticalScrollPosition;"/>
			</mx:Panel>
			<cwui:ChatPanel id="messagesPanel" title="Messages" width="100%" height="100%" layout="vertical" verticalGap="0"
				privateMode="false"
				newChatMessage="onEnterInput(event)"/>
		</mx:VDividedBox>
	</mx:VBox>

</mx:TitleWindow>
