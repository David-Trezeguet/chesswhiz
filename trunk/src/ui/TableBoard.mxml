<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="858" height="750">
<mx:Script>
	<![CDATA[
		import mx.controls.Label;
		import mx.controls.Image;
		import mx.controls.DataGrid;
		import hoxserver.*;

		private var tableObj:Table;
		public var board:Board;
		private var boardPanelWidth:int;
		private var boardPanelHeight:int;
		private var boardHeight:int;
		private var boardWidth:int;
		private var topMargin:int;
		private var leftMargin:int;
		public var grid:DataGrid;
		private var timerIcon:String;
		private var redPlayerIcon:String;
		private var blackPlayerIcon:String;
		public function display(tObj:Table) : void
		{
			this.title = "Table #" + tObj.tableId;
			this.redPlayerIcon = "images/redplayer.png";
			this.blackPlayerIcon =  "images/blackplayer.png";
			this.timerIcon = "images/player_time.png";
			this.tableObj = tObj;
			this.boardHeight = 560;
			this.boardWidth = 560;
			this.boardPanelHeight = 30;
			this.boardPanelWidth = 560;
			this.leftMargin = 10;
			this.topMargin = 10;
			this.board = new Board(this.boardHeight, this.boardWidth, this.tableObj);
			this.displayBoard();
		}
		public function displayBoard():void 
		{
			var pref:Object = this.tableObj.getPreferences();
			this.board.createBoard(this, pref["boardcolor"], pref["linecolor"], pref["pieceskinindex"], this.leftMargin, this.topMargin + this.boardPanelHeight);
		}
		public function displayPlayerData(player:PlayerInfo):void
		{
			var mcPlayer:HBox = (player.getColor() === this.tableObj.getTopSideColor()) ? this.topPlayer : this.bottomPlayer;
			while (mcPlayer.numChildren > 0) {
				mcPlayer.removeChildAt(0);
			}
			var mcPlayerImage:Image = new Image();
			mcPlayerImage.y = 2;
			mcPlayerImage.x = 2;
			mcPlayerImage.source = Global.vars.app.baseURI + "res/";
			if (player.getColor() == "Red") {
				mcPlayerImage.source += this.redPlayerIcon;
			} else {
				mcPlayerImage.source += this.blackPlayerIcon;
			}
			mcPlayerImage.width = 20;
			mcPlayer.addChild(mcPlayerImage);
			Util.createTextField(mcPlayer, player.getPlayerID() + "(" + player.getScore() + ")", 45, 5, false, 0xa09e9e, "Verdana", 12);

			var timer:GameTimers = this.tableObj.getTimers(player.getColor());
			this.displayTimers(player.getColor(), timer);
		}
		public function removePlayerData(color:String):void 
		{
			var mcPlayer:HBox = (color === this.tableObj.getTopSideColor()) ? this.topPlayer : this.bottomPlayer;
			while (mcPlayer.numChildren > 0) {
				mcPlayer.removeChildAt(0);
			}
			var mcTimers:HBox = (color === this.tableObj.getTopSideColor()) ? this.topTimers : this.bottomTimers;
			while (mcTimers.numChildren > 0) {
				mcTimers.removeChildAt(0);
			}			
		}
		
		public function displayTimers(color:String, timer:GameTimers) : void
		{
			var mcPlayer:HBox = (color === this.tableObj.getTopSideColor()) ? this.topPlayer : this.bottomPlayer;
			var mcTimers:HBox = (color === this.tableObj.getTopSideColor()) ? this.topTimers : this.bottomTimers;
			while (mcTimers.numChildren > 0) {
				mcTimers.removeChildAt(0);
			}
			var bounds:Object = topPanel.getBounds(this);
			trace("x: " + bounds.x + " y: " + bounds.y + " w: " + bounds.width + " h: " + bounds.height);
			var mcTimeImage:Image = new Image();
			mcTimeImage.y = 5;
			mcTimeImage.x = 4;
			mcTimeImage.source = Global.vars.app.baseURI + "res/" + this.timerIcon;
			mcTimeImage.width = 20;
			mcTimers.addChild(mcTimeImage);
			var tfTime:Label = Util.createTextField(mcTimers, timer.getTimer("game"), 30, 5, false, 0xa09e9e, "Verdana", 12);
			tfTime.name = color + "game";
			tfTime = Util.createTextField(mcTimers, timer.getTimer("move"), 70, 5, false, 0xa09e9e, "Verdana", 12);
			tfTime.name = color + "move";
			tfTime = Util.createTextField(mcTimers, timer.getTimer("extra"), 110, 5, false, 0xa09e9e, "Verdana", 12);
			tfTime.name = color + "extra";
		}
		
		public function updateTimers(color:String, timer:GameTimers) : void
		{
			var mcTimers:HBox = (color === this.tableObj.getTopSideColor()) ? this.topTimers : this.bottomTimers;
			if (mcTimers == null || mcTimers.numChildren == 0) {
				return;
			}
			var tfTime:Label = mcTimers.getChildByName(color + "game") as Label;
			if (tfTime) {
				tfTime.text = timer.getTimer("game");
			}
			tfTime = mcTimers.getChildByName(color + "move") as Label;
			if (tfTime) {
				tfTime.text = timer.getTimer("move");
			}
			tfTime = mcTimers.getChildByName(color + "extra") as Label;
			if (tfTime) {
				tfTime.text = timer.getTimer("extra");
			}
		}

		public function displayMessage(msg:String):void
		{
			this.taMessages.text += msg + "\n";		
		}
		
		public function displayMoves():void 
		{
		}
		
		public function displayMoveData(mov:String, moveIndex:int) : void
		{
			
		}

		public function reviewMove(event:Event):void
		{
			var button:Button = Button(event.target);
			trace("button name: " + button.name);
			tableObj.reviewMove(button.name);
		}
		
		public function displayChatMessage(pid:String, chatMsg:String) : void 
		{
			this.taChat.text  += "[" + pid + "] " + chatMsg + "\n";
		}
        public function postChatMessage(event:KeyboardEvent):void
        {
        	if (event.keyCode != Keyboard.ENTER) {
        		return;
        	}
        	var temp:String;
			var chatMsg:String = this.taChatInput.text
			if (chatMsg.charAt(chatMsg.length - 1) == "\n") {
				temp = chatMsg.substr(0, chatMsg.length - 1);
				chatMsg = temp;
			}
			if (chatMsg.charAt(chatMsg.length - 1) == "\r") {
				temp = chatMsg.substr(0, chatMsg.length - 1);
				chatMsg = temp;
			}
			trace("chat input msg: " + chatMsg);
			if (chatMsg.search("/debug") == 0) {
				tableObj.handleDebugCmd(chatMsg);
				this.taChatInput.text = "";
				return;
			}
			Global.vars.app.doTableChat(chatMsg);
			this.taChatInput.text = "";
			this.displayChatMessage(Global.vars.app.getPlayerID(), chatMsg);
        }

		public function getBoard():Board 
		{
			return board;
		}
		public function redrawBoard(boardColor:uint, lineColor:uint, pieceSkin:int) : void 
		{
			this.board.drawBoard(this, boardColor, lineColor, pieceSkin, this.leftMargin, this.topMargin + this.boardPanelHeight);
			this.board.changePiecesSkin(pieceSkin);
			var piece:Piece = this.board.getFocusPiece();
			if (piece) {
				piece.setFocus();
			}
		}
		
		public function changePieceSkin(pieceSkin:int) : void 
		{
			this.board.changePiecesSkin(pieceSkin);
			var piece:Piece = this.board.getFocusPiece();
			if (piece) {
				piece.setFocus();
			}
		}
		public function enableReviewButtons(flag:Boolean) : void 
		{
			for (var i:int = 0; i < this.mcMoves.numChildren; i++) {
				if (this.mcMoves.getChildAt(i) is Button) {
					var button:Button = (Button)(this.mcMoves.getChildAt(i));
					button.enabled = flag;
				}
			}
		}

	]]>
</mx:Script>
	<mx:HBox x="150" y="638" width="187" height="31" id="mcMoves">
		<mx:Button label="|&lt;" name="start" enabled="false" click="reviewMove(event)"/>
		<mx:Button label="&lt;" name="rewind" enabled="false" click="reviewMove(event)"/>
		<mx:Button label="&gt;" name="forward" enabled="false" click="reviewMove(event)"/>
		<mx:Button label="&gt;|" name="end" enabled="false" click="reviewMove(event)"/>
	</mx:HBox>
	<mx:Panel x="578" y="10" width="250" height="242" layout="absolute" title="Messages">
		<mx:TextArea x="10" y="10" width="220" height="182"  id="taMessages"/>
	</mx:Panel>
	<mx:Panel x="578" y="302" width="260" height="298" layout="absolute" title="Chat">
		<mx:TextArea x="10" y="10" width="220" height="168" id="taChat" />
		<mx:TextInput x="10" y="186" width="220" height="62" id="taChatInput" keyDown="postChatMessage(event)"/>
	</mx:Panel>
	<mx:Canvas x="10" y="10" width="560" height="30" id="topPanel" >
		<mx:HBox x="0" y="0" width="251" height="28" id="topPlayer">
		</mx:HBox>
		<mx:HBox x="377" y="0" width="183" height="28" id="topTimers">
		</mx:HBox>
	</mx:Canvas>
	<mx:Canvas x="10" y="599" width="560" height="30" id="bottomPanel">
		<mx:HBox x="0" y="1" width="209" height="28" id="bottomPlayer">
		</mx:HBox>
		<mx:HBox x="363" y="1" width="197" height="28" id="bottomTimers">
		</mx:HBox>
	</mx:Canvas>
</mx:Panel>
