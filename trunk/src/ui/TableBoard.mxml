<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:cwui="ui.*"
	layout="horizontal" width="886" height="718"
	paddingBottom="8" paddingLeft="8" paddingRight="8" paddingTop="8"
	showCloseButton="true"
	initialize="init()"
	close="Global.app.doCloseTable();">

<mx:Script>
	<![CDATA[
		import mx.utils.ObjectUtil;
		import mx.managers.PopUpManager;
		import mx.utils.StringUtil;
		import mx.controls.Label;
		import mx.controls.Image;
		import hoxserver.*;

		private var _table:Table;

		private function init() : void
		{
			topTimerImage.source = Global.timerImgClass;
			bottomTimerImage.source = topTimerImage.source;
			
			infoPanel.title = resourceManager.getString('localization', 'Information');
			chatPanel.title = resourceManager.getString('localization', 'Chat');
			chatInput.text = resourceManager.getString('localization', 'chat_prompt');
		}

		public function display(table:Table, bgColor:uint, lineColor:uint, pieceSkin:int) : void
		{
			this.title = "Table #" + table.tableId;
			_table = table;
			board.setTable(_table);
			board.drawBoardAndPieces(bgColor, lineColor, pieceSkin);
		}

		public function displayPlayerData(player:PlayerInfo) : void
		{
			var playerLabel:Label = (player.color == _table.getTopSideColor() ? topLabel : bottomLabel);
			playerLabel.text = player.pid + "(" + player.score + ")";

			var playerImage:Image = (player.color == _table.getTopSideColor() ? topImage : bottomImage);
			playerImage.source = (player.color == "Red" ? Global.redPlayerImgClass
													    : Global.blackPlayerImgClass);
			
			var timer:GameTimers = _table.getTimers(player.color);
			updateTimers(player.color, timer);
		}

		public function removePlayerData(color:String) : void 
		{
			var playerLabel:Label = (color == _table.getTopSideColor() ? topLabel : bottomLabel);
			playerLabel.text = "";

			// NOTE: There is no need to clear/reset the timer for now.
		}
		
		public function updateTimers(color:String, timer:GameTimers) : void
		{
			if (color == _table.getTopSideColor())
			{
				topTimerGame.text = timer.getTimer("game");
				topTimerMove.text = timer.getTimer("move");
				topTimerExtra.text = timer.getTimer("extra");
			}
			else
			{
				bottomTimerGame.text = timer.getTimer("game");
				bottomTimerMove.text = timer.getTimer("move");
				bottomTimerExtra.text = timer.getTimer("extra");
			}
		}

		public function displayMessage(msg:String) : void
		{
			this.taMessages.text += msg + "\n";		
		}

		private function reviewMove(cmd:String) : void
		{
			_table.reviewMove(cmd);
		}
		
		public function displayChatMessage(pid:String, chatMsg:String) : void 
		{
			chatArea.text  += "[" + pid + "] " + chatMsg + "\n";
		}

        public function onEnterInput(event:Event) : void
        {
			const chatMsg:String = StringUtil.trim( chatInput.text );
			chatInput.text = "";

			Global.app.doTableChat(chatMsg);
			this.displayChatMessage(Global.app.getPlayerID(), chatMsg);
        }

        public function onSettingsButtonClicked(event:Event) : void
        {
			var settingsPanel:TableSettings = new TableSettings();
			PopUpManager.addPopUp(settingsPanel, this, true /* modal */);
			PopUpManager.centerPopUp(settingsPanel);
			settingsPanel.settings = ObjectUtil.copy( _table.getSettings() );
			settingsPanel.applyCurrentSettings();
			settingsPanel.addEventListener("newSettings", newSettingsEventHandler);
        }

		/**
		 * Callback function to handle the "newSettings" event generated
		 * by the 'TableSettings' window.
		 */
		private function newSettingsEventHandler(event:Event) : void
		{
			var settingsPanel:TableSettings = event.target as TableSettings;
			if ( settingsPanel != null )
			{
				_table.updateSettings( settingsPanel.settings );
			}	
		}

		public function redrawBoard(boardColor:uint, lineColor:uint) : void 
		{
			board.drawBoard(boardColor, lineColor);
		}
		
		public function changePieceSkin(pieceSkin:int) : void 
		{
			board.changePiecesSkin(pieceSkin);
		}

		public function enableReviewButtons(flag:Boolean) : void 
		{
			startButton.enabled   = flag;
			rewindButton.enabled  = flag;
			forwardButton.enabled = flag;
			endButton.enabled     = flag;
		}

		private function onChatInputFocusIn(event:FocusEvent) : void
		{
			chatInput.text = "";
		}

	]]>
</mx:Script>

	<mx:VBox height="654" width="550" verticalGap="5">
	
		<mx:HBox width="100%">
			<mx:HBox id="topPlayer" width="209" height="28" verticalAlign="middle">
				<mx:Image id="topImage" scaleContent="true"/>
				<mx:Label id="topLabel" fontSize="12" color="#A09E9E"/>
			</mx:HBox>
			<mx:Spacer width="100%" />
			<mx:HBox id="topTimers" width="197" height="28" verticalAlign="middle">
				<mx:Image id="topTimerImage"/>
				<mx:Label id="topTimerGame" fontSize="12" color="#A09E9E" text="00:00"/>
				<mx:Label id="topTimerMove" fontSize="12" color="#A09E9E" text="00:00"/>
				<mx:Label id="topTimerExtra" fontSize="12" color="#A09E9E" text="00:00"/>
			</mx:HBox>
		</mx:HBox>
		
		<cwui:BoardCanvas id="board" x="10" y="48" width="550" height="550" />

		<mx:HBox width="100%">
			<mx:HBox id="bottomPlayer" width="209" height="28" verticalAlign="middle">
				<mx:Image id="bottomImage" scaleContent="true"/>
				<mx:Label id="bottomLabel" fontSize="12" color="#A09E9E"/>
			</mx:HBox>
			<mx:Spacer width="100%" />
			<mx:HBox id="bottomTimers" width="197" height="28" verticalAlign="middle">
				<mx:Image id="bottomTimerImage"/>
				<mx:Label id="bottomTimerGame" fontSize="12" color="#A09E9E" text="00:00"/>
				<mx:Label id="bottomTimerMove" fontSize="12" color="#A09E9E" text="00:00"/>
				<mx:Label id="bottomTimerExtra" fontSize="12" color="#A09E9E" text="00:00"/>
			</mx:HBox>
		</mx:HBox>
		
		<mx:HBox x="150" y="638" width="100%" horizontalGap="3">
			<mx:Button id="startButton" label="|&lt;" enabled="false" click="reviewMove('start')" />
			<mx:Button id="rewindButton" label="&lt;" enabled="false" click="reviewMove('rewind')" />
			<mx:Button id="forwardButton" label="&gt;" enabled="false" click="reviewMove('forward')" />
			<mx:Button id="endButton" label="&gt;|" enabled="false" click="reviewMove('end')" />
			<mx:Spacer width="100%" />
			<mx:Button id="settingsButton" label="Settings" click="onSettingsButtonClicked(event)" />
		</mx:HBox>
	</mx:VBox>

	<mx:Spacer width="0" />

	<mx:VBox height="654" width="270">
		<mx:Spacer height="26" />
		<mx:Panel id="infoPanel" title="Information" width="100%" height="242" layout="absolute">
			<mx:TextArea id="taMessages" width="100%" height="100%" editable="false" />
		</mx:Panel>

		<mx:Panel id="chatPanel" title="Chat" width="100%" height="300" layout="vertical" verticalGap="0">
			<mx:TextArea id="chatArea" width="100%" height="230" editable="false" backgroundColor="#F8F6F1"/>
			<mx:TextInput id="chatInput" width="100%" height="100%"
				enter="onEnterInput(event)"
				focusIn="onChatInputFocusIn(event)"/>
		</mx:Panel>
	</mx:VBox>

</mx:TitleWindow>
