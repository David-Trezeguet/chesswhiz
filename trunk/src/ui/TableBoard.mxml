<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:cwui="ui.*"
	layout="horizontal" width="830" height="710"
	paddingBottom="4" paddingLeft="4" paddingRight="4" paddingTop="4"
	showCloseButton="true"
	creationComplete="onCreationComplete()"
	close="Global.app.doCloseTable();">

<mx:Script>
	<![CDATA[
		import mx.utils.ObjectUtil;
		import mx.managers.PopUpManager;
		import mx.controls.Label;
		import mx.controls.Image;
		import hoxserver.*;

		private var _table:Table;

		private var _redId:String    = "";
		private var _blackId:String  = "";
		private var _moveCount:uint  = 0;
		private var _gameOver:Boolean = false;

		private function onCreationComplete() : void
		{
			playersPanel.title        = resourceManager.getString('localization', 'Players');
			activitiesPanel.title     = resourceManager.getString('localization', 'Activities');
			messagesPanel.title       = resourceManager.getString('localization', 'Messages');
			resignButton.label        = resourceManager.getString('localization', 'Resign');
			drawButton.label          = resourceManager.getString('localization', 'Draw');
			reverseViewButton.toolTip = resourceManager.getString('localization', 'Reverse_View');
			settingsButton.toolTip    = resourceManager.getString('localization', 'Table_Settings');
			resetButton.toolTip       = resourceManager.getString('localization', 'Reset_table');
		}

		public function setPreferences(table:Table, bgColor:uint, lineColor:uint, pieceSkin:int) : void
		{
			_table = table;
			board.setTable(_table);
			board.setPreferences(bgColor, lineColor, pieceSkin);
		}

		public function onNewMoveFromTable( moveColor:String,
											oldPos:Position, newPos:Position, bCapturedMove:Boolean,
											bSetup:Boolean = false) : void
		{
			board.doMove(moveColor, oldPos, newPos, bCapturedMove);

			++_moveCount;
			if (_moveCount == 2)
			{
				if ( moveColor == "Red" ) {  blackClock.start(); }
				else                      {  redClock.start();   }
			}
			else if (_moveCount > 2)
			{
				if (moveColor == "Red")
				{
					redClock.stop();
					if ( ! bSetup ) { blackClock.resetMoveTime(); }
					blackClock.start();
				}
				else
				{
					blackClock.stop();
					if ( ! bSetup ) { redClock.resetMoveTime(); }
					redClock.start();
				}
			}

			_updateCommandButtons();
		}

		public function onGameOverEventFromTable(winner:String, reason:String) : void
		{
			//_moveCount = 0;
			_gameOver = true;
			_updateCommandButtons();

			redClock.stop();
			blackClock.stop();

			/* Display the detailed message on why the Game ended.
			 * TODO: Need to localize the detailed info-message.
			 */

			var infoMsg:String = resourceManager.getString('localization', 'Game_Over');
			board.displayStatus(infoMsg);

			switch ( winner )
			{
				case "red_win":   infoMsg += ". " + _redId + " won."; break;
				case "black_win": infoMsg += ". " + _blackId + " won."; break;
				case "drawn":     infoMsg += ". Game drawn."; break;
			}
			if ( reason != "" ) { infoMsg += " " + reason; }

			this.onBoardMessage(infoMsg, "***");
		}

		/**
		 * This function is called in the following two cases:
		 *   (1) An Empty table needs to be created ( table-ID = "").
		 *   (2) A New table needs to be setup ( table-ID != "").
		 */
		public function clearDisplay() : void
		{
			_redId = "";
			_blackId = "";

			_moveCount = 0;
			_gameOver = false;

			playersPanel.removeAllPlayers();
			activitiesArea.text = "";
			messagesPanel.clearPanel();

			redClock.stop();
			blackClock.stop();
			redClock.resetToZero();
			blackClock.resetToZero();

			_updateCommandButtons();
			board.reset();
			
			if ( _table.tableId == "" )
			{
				this.title = "";
				board.displayEmptyStatus();
				this.showCloseButton = false;
				redPanel.visible = false;
				blackPanel.visible = false;
				redClock.visible = false;
				blackClock.visible = false;
			}
			else
			{
				redPanel.visible = true;
				redPanel.playerLabel = "";
				blackPanel.visible = true;
				blackPanel.playerLabel = "";
				redClock.visible = true;
				blackClock.visible = true;
				this.title = "Table #" + _table.tableId;
				this.showCloseButton = true;
			}
		}

		private function _reverseView() : void
		{
			/* NOTE: Assuming that the two Player-Boxes are with
			 *       the index 0 and 2 of the main parent container.
			 */
			boardBox.setChildIndex( boardBox.getChildAt(2), 0 );
			boardBox.setChildIndex( boardBox.getChildAt(1), 2 );

			board.reverseView();
		}

		/**
		 * @note The player can join the Table as an observer (color = "None").
		 */
		public function onPlayerJoined(player:PlayerInfo) : void
		{
			if ( playersPanel.addPlayer(player.pid, player.score) ) // newly joined?
			{
				this.onSystemMessage(player.pid + " joined");
			}

			switch ( player.color )
			{
				case  "None":
				{
					if ( player.pid == _redId )
					{
						_redId = "";
						redPanel.playerLabel = "";
					}
					else if ( player.pid == _blackId )
					{
						_blackId = "";
						blackPanel.playerLabel = "";
					}
					break;
				}
				case "Red":
				{
					_redId = player.pid;
					redPanel.playerLabel = player.pid + " (" + player.score + ")";
					break;
				}
				case "Black":
				{
					_blackId = player.pid;
					blackPanel.playerLabel = player.pid + " (" + player.score + ")"
					break;
				}
			}

			_updateCommandButtons();

			// By default, my side is at the bottom of the board.
			if (   Global.player.pid == _blackId && _isBlackAtTopSide()
				|| Global.player.pid == _redId && !_isBlackAtTopSide() )
			{
				_reverseView();
			}
		}

		/**
		 * Handle the event in which a player left the Table.
		 */
		public function onPlayerLeft(playerId:String) : void
		{
			if ( playersPanel.removePlayer(playerId) ) // was in the list?
			{
				this.onSystemMessage(playerId + " left");
			}

			if ( playerId == _redId )
			{
				_redId = "";
				redPanel.playerLabel = "";
			}
			else if ( playerId == _blackId )
			{
				_blackId = "";
				blackPanel.playerLabel = "";
			}

			_updateCommandButtons();
		}

		/**
		 * Handle the event in which this Table is reset..
		 */
		public function onReset() : void
		{
			_moveCount = 0;
			_gameOver = false;
			_updateCommandButtons();

			redClock.stop();
			blackClock.stop();
			redClock.resetToInitial();
			blackClock.resetToInitial();

			board.reset();
		}

		/**
		 * This helper function determines whether the Black side is displayed
		 * at the top of the board.
		 */
		private function _isBlackAtTopSide() : Boolean
		{
			return ( boardBox.getChildIndex(blackBox) == 0 );
		}

		private function _updateCommandButtons() : void
		{
			const gameStarted:Boolean = ( !_gameOver && _moveCount > 0 );
			const bIPlay:Boolean = (Global.player.pid == _redId || Global.player.pid == _blackId);

			if ( Global.player.pid == _redId  )
			{
				redPanel.showLeaveButton( !gameStarted );
			}
			else if ( Global.player.pid == _blackId )
			{
				blackPanel.showLeaveButton( !gameStarted );
			}
			else
			{
				redPanel.showLeaveButton(false);
				blackPanel.showLeaveButton(false);
			}

			if ( _table.tableId == "" )
			{
				settingsButton.enabled = false;
			 	resignButton.enabled = false;
			 	drawButton.enabled = false;
			}
			else
			{
				settingsButton.enabled = true;
				 if ( bIPlay && gameStarted )
				 {
				 	resignButton.enabled = true;
				 	drawButton.enabled = true;
				 }
				 else
				 {
				 	resignButton.enabled = false;
				 	drawButton.enabled = false;
				 }
			}

			resetButton.enabled = (bIPlay && _moveCount > 0);
		}

		public function initializeTimers(itimes:String, redTimes:String = "", blackTimes:String = "") : void
		{
			redClock.initWith(itimes, redTimes);
			blackClock.initWith(itimes, blackTimes);
		}

		public function onSystemMessage(msg:String) : void
		{
			activitiesArea.text += msg + "\n";		
		}

		/**
		 * @bPrivate If true, then this message is private.
		 */
		public function onBoardMessage(msg:String, senderId:String = "", bPrivate:Boolean = false) : void 
		{
			messagesPanel.onMessageFrom(senderId, msg, bPrivate);
		}

		/**
		 * Post an error message to the 'Messages' window.
		 */
		public function onErrorMessage(msg:String) : void 
		{
			messagesPanel.onMessageFrom("*ERROR*", msg);
		}

		private function onReviewButton(cmd:String) : void
		{
			switch ( cmd )
			{
				case "start":   board.doGameReview_BEGIN(); break;
				case "rewind":  board.doGameReview_PREV(); break;
				case "forward": board.doGameReview_NEXT(); break;
				case "end":     board.doGameReview_END(); break;
			}
		}

		public function onNewPlayerScore(pid:String, score:String) : void 
		{
			if      ( _redId == pid )   { redPanel.playerLabel = pid + " (" + score + ")"; }
			else if ( _blackId == pid ) { blackPanel.playerLabel = pid + " (" + score + ")"; }
			playersPanel.addPlayer(pid, score); // Add = Update.
		}

		public function onEnterInput(event:Event) : void
		{
			const msg:String = messagesPanel.newMessage;
			Global.app.doSendMessage(msg);
		}

		public function onSettingsButton(event:Event) : void
		{
			var settingsPanel:TableSettings = new TableSettings();
			PopUpManager.addPopUp(settingsPanel, this, true /* modal */);
			PopUpManager.centerPopUp(settingsPanel);
			settingsPanel.settings = ObjectUtil.copy( _table.getSettings() );
			settingsPanel.addEventListener("newSettings", newSettingsEventHandler);
		}

		public function onResignButton(event:Event) : void
		{
			Global.app.doResignTable();
		}

		public function onDrawButton(event:Event) : void
		{
			Global.app.doDrawTable();
		}

		public function onResetButton(event:Event) : void
		{
			Global.app.doResetTable();
		}

		public function onPlayButton(event:Event) : void
		{
			Global.app.doJoinTable( _table.tableId,
									(event.target == redPanel ? "Red" : "Black") );
		}

		public function onLeaveButton(event:Event) : void
		{
			Global.app.doJoinTable( _table.tableId, "None" );
		}

		/**
		 * Callback function to handle the "newSettings" event generated
		 * by the 'TableSettings' window.
		 */
		private function newSettingsEventHandler(event:Event) : void
		{
			var settingsPanel:TableSettings = event.target as TableSettings;
			if ( settingsPanel != null )
			{
				_table.updateSettings( settingsPanel.settings );
			}	
		}

		public function redrawBoard(boardColor:uint, lineColor:uint) : void 
		{
			board.drawBoard(boardColor, lineColor);
		}
		
		public function changePieceSkin(pieceSkin:int) : void 
		{
			board.changePiecesSkin(pieceSkin);
		}

	]]>
</mx:Script>

	<mx:VBox id="boardBox" height="100%" width="500" verticalGap="4" horizontalAlign="left">
	
		<mx:HBox id="blackBox" width="100%" verticalAlign="middle">
			<cwui:PlayerPanel id="blackPanel" playerColor="Black" height="28"
				playButtonClick="onPlayButton(event);"
				leaveButtonClick="onLeaveButton(event);"/>
			<mx:Spacer width="100%" />
			<cwui:ClockPanel id="blackClock" width="197" height="28"/>
		</mx:HBox>
		
		<cwui:BoardCanvas id="board" x="10" y="48" width="500" height="550" />

		<mx:HBox id="redBox" width="100%" verticalAlign="middle">
			<cwui:PlayerPanel id="redPanel" playerColor="Red" height="28"
				playButtonClick="onPlayButton(event);"
				leaveButtonClick="onLeaveButton(event);"/>
			<mx:Spacer width="100%" />
			<cwui:ClockPanel id="redClock" width="197" height="28"/>
		</mx:HBox>
		
		<mx:ApplicationControlBar width="100%" fillAlphas="[1.0, 1.0]" fillColors="[#383232, #FFFFFF]">
			<mx:Image id="startButton" click="onReviewButton('start')"
				source="@Embed(source='../assets/go_first.png')" alpha="1.0"/>
			<mx:Image id="rewindButton" click="onReviewButton('rewind')"
				source="@Embed(source='../assets/go_previous.png')" alpha="1.0"/>
			<mx:Image id="forwardButton" click="onReviewButton('forward')"
				source="@Embed(source='../assets/go_next.png')" alpha="1.0"/>
			<mx:Image id="endButton" click="onReviewButton('end')"
				source="@Embed(source='../assets/go_last.png')" alpha="1.0"/>
			<mx:Spacer width="100%" />
			<mx:Button id="reverseViewButton" click="_reverseView();"
				icon="@Embed(source='../assets/reverse.png')"/>
			<mx:Button id="settingsButton" click="onSettingsButton(event)" 
				icon="@Embed(source='../assets/settings.png')"/>
			<mx:Button id="resetButton" click="onResetButton(event)" 
				icon="@Embed(source='../assets/reset.png')"/>
			<mx:Spacer width="100%" />
			<mx:Button id="resignButton" label="Resign" click="onResignButton(event)"
				icon="@Embed(source='../assets/white_flag.png')"/>
			<mx:Button id="drawButton" label="Draw" click="onDrawButton(event)"
				icon="@Embed(source='../assets/blue_flag.png')"/>
		</mx:ApplicationControlBar>
	</mx:VBox>

	<mx:VBox height="100%" width="100%">
		<cwui:PlayerListPanel id="playersPanel" title="Players" width="100%" height="160"/>
		<mx:VDividedBox width="100%" height="100%">
			<mx:Panel id="activitiesPanel" title="Activities" width="100%" height="230" layout="vertical">
				<mx:TextArea id="activitiesArea" width="100%" height="100%" editable="false"
					valueCommit="activitiesArea.verticalScrollPosition=activitiesArea.maxVerticalScrollPosition;"/>
			</mx:Panel>
			<cwui:ChatPanel id="messagesPanel" title="Messages" width="100%" height="100%" layout="vertical" verticalGap="0"
				privateMode="false"
				newChatMessage="onEnterInput(event)"/>
		</mx:VDividedBox>
	</mx:VBox>

</mx:TitleWindow>
