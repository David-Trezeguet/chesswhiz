<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	initialize="init()">
	
<mx:Script>
	<![CDATA[
		import mx.controls.Label;

		/* History index.
		 * NOTE: Do not change the constants 'values below.
		 */
		public static const HISTORY_INDEX_END:int = -2;
		public static const HISTORY_INDEX_BEGIN:int = -1;

		private var _historyMoves:Array = [];  // All (past) Moves made so far.
		private var _historyIndex:int = HISTORY_INDEX_END; // Which Move the user is reviewing.
		////////////////////////////////////////

		private const offset:int = 50;

		private var _cellSize:int;
		private var _redPieces:Array = new Array(16);
		private var _blackPieces:Array = new Array(16);

		/*************************************************/
		private var _pieceMap:Array = null;    // A 9x10 piece-map.
		private var _captureStack:Array = [];  // A stack of captured pieces.
		/*************************************************/

		private var _table:Table = null;
		private var _topColor:String = "Black"; // Normal view: Black at the top.

		private var _lastPieceInFocus:Piece = null;
		private var _pieceSkin:int = 1;
		private var _bgColor:uint;
		private var _lineColor:uint;

		private function init() : void
		{
			_cellSize = (width - 2 * offset)/8;

			// --- Create piece objects.

			var index:int = 0;
			var color:String = "Red";
			_redPieces[0]  = new Piece("chariot",  color, 9, 0, this);
			_redPieces[1]  = new Piece("horse",    color, 9, 1, this);
			_redPieces[2]  = new Piece("elephant", color, 9, 2, this);
			_redPieces[3]  = new Piece("advisor",  color, 9, 3, this);
			_redPieces[4]  = new Piece("king",     color, 9, 4, this);
			_redPieces[5]  = new Piece("advisor",  color, 9, 5, this);
			_redPieces[6]  = new Piece("elephant", color, 9, 6, this);
			_redPieces[7]  = new Piece("horse",    color, 9, 7, this);
			_redPieces[8]  = new Piece("chariot",  color, 9, 8, this);
			_redPieces[9]  = new Piece("cannon",   color, 7, 1, this);
			_redPieces[10] = new Piece("cannon",   color, 7, 7, this);

  			for (var pawn:int = 0; pawn < 5; pawn++) {
	        	_redPieces[11 + pawn] = new Piece("pawn", color, 6, 2*pawn, this);
			}
			
			index = 0;
			color = "Black";
			_blackPieces[0]  = new Piece("chariot",  color, 0, 0, this);
			_blackPieces[1]  = new Piece("horse",    color, 0, 1, this);
			_blackPieces[2]  = new Piece("elephant", color, 0, 2, this);
			_blackPieces[3]  = new Piece("advisor",  color, 0, 3, this);
			_blackPieces[4]  = new Piece("king",     color, 0, 4, this);
			_blackPieces[5]  = new Piece("advisor",  color, 0, 5, this);
			_blackPieces[6]  = new Piece("elephant", color, 0, 6, this);
			_blackPieces[7]  = new Piece("horse",    color, 0, 7, this);
			_blackPieces[8]  = new Piece("chariot",  color, 0, 8, this);
			_blackPieces[9]  = new Piece("cannon",   color, 2, 1, this);
			_blackPieces[10] = new Piece("cannon",   color, 2, 7, this);
	
  			for (pawn = 0; pawn < 5; pawn++) {
	        	_blackPieces[11 + pawn] = new Piece("pawn", color, 3, 2*pawn, this);
			}

 			// --- Initialize the internal state.
			_resetInternalState();
		}

		public function setTable(table:Table) : void { _table = table; }
		public function getTable() : Table { return _table; }

		public function setPreferences(bgColor:uint, lineColor:uint, pieceSkin:int) : void
		{
			_bgColor   = bgColor;
			_lineColor = lineColor;
			_pieceSkin = pieceSkin;
		}

		public function reverseView() : void
		{
			_topColor = (_topColor == "Red" ? "Black" : "Red");

			// Clear the old board.
			this.graphics.clear();
			this.removeAllChildren();

			drawBoard(_bgColor, _lineColor);

			var piece:Piece = null;
			for (var i:int = 0; i < 16; i++)
			{
				piece = _redPieces[i];
				if ( ! piece.isCaptured() ) {
					piece.draw(offset, _cellSize, _pieceSkin);
				}
				piece = _blackPieces[i];
				if ( ! piece.isCaptured() ) {
					piece.draw(offset, _cellSize, _pieceSkin);
				}
			}

			if (_lastPieceInFocus) {
				_lastPieceInFocus.setFocus();
			}
		}

		public function reset() : void
		{
			// Clear the old board.
			this.graphics.clear();
			this.removeAllChildren();

			drawBoard(_bgColor, _lineColor);

			var piece:Piece = null;
			for (var i:int = 0; i < 16; i++)
			{
				piece = _redPieces[i];
				piece.setCapture(false);
				piece.setPosition( piece.getInitialPosition() );
				piece.draw(offset, _cellSize, _pieceSkin);

				piece = _blackPieces[i];
				piece.setCapture(false);
				piece.setPosition( piece.getInitialPosition() );
				piece.draw(offset, _cellSize, _pieceSkin);
			}

			if (_lastPieceInFocus)
			{
				_lastPieceInFocus.clearFocus();
				_lastPieceInFocus = null;
			}

			_resetInternalState();
			_captureStack = [];
		    _historyMoves = [];
		    _historyIndex = HISTORY_INDEX_END;
		}

		public function drawBoard(bgColor:uint, lineColor:uint) : void
		{
			_bgColor        = bgColor;
			_lineColor      = lineColor;

			this.graphics.lineStyle(2, _lineColor);
			this.graphics.beginFill(_bgColor);
			this.graphics.drawRect(0, 0, this.width, this.height);
			this.graphics.endFill();

			this.graphics.lineStyle(1, _lineColor);

			for (var i:int = 0; i < 10; i++) // Horizontal lines
			{
				_drawLine(offset, offset+i*_cellSize, 8*_cellSize, 0);
			}
	
			for (i = 0; i < 9; i++) // Vertical lines
			{
				if (i == 0 || i == 8) {
					_drawLine(offset + i*_cellSize, offset, 0, _cellSize*9);
				} else {
					_drawLine(offset + i*_cellSize, offset, 0, _cellSize*4);
					_drawLine(offset + i*_cellSize, offset + 5*_cellSize, 0, _cellSize*4);
				}
			}

			// Diagonal lines to form the Fort (or the Palace).
			_drawLine(offset + 3*_cellSize, offset, 2*_cellSize, 2*_cellSize);
			_drawLine(offset + 5*_cellSize, offset, -2*_cellSize, _cellSize*2);
			_drawLine(offset + 3*_cellSize, offset + 7*_cellSize, 2*_cellSize, 2*_cellSize);
			_drawLine(offset + 5*_cellSize, offset + 7*_cellSize, -2*_cellSize, 2*_cellSize);

			const offsetLeft:int = offset;
	        const offsetTop:int = offset;
			const bDescending:Boolean = (_topColor == "Red");
			_drawHeaderRow(offsetLeft, offsetTop, bDescending);
			_drawHeaderRow(offset + _cellSize*9 + 15, offset, bDescending);
			_drawHeaderColumn(offsetLeft, offsetTop, bDescending);
			_drawHeaderColumn(offsetLeft, offsetTop + 10*_cellSize + 20, bDescending);
		}

		private function _displayPieces() : void
		{
			for (var i:int = 0; i < 16; i++)
			{
				_redPieces[i].draw(offset, _cellSize, _cellSize, _pieceSkin);
				_blackPieces[i].draw(offset, _cellSize, _cellSize, _pieceSkin);
			}
		}

		private function _drawLine(startX:int, startY:int, dX:int, dY:int):void
		{
			this.graphics.moveTo(startX, startY);
			this.graphics.lineTo(startX+dX, startY+dY);
		}

		private function _drawHeaderRow(offsetLeft:int, offsetTop:int, bDescending:Boolean) : void
		{
			const ROWS:int  = 10;
			var   top:int   = 0;
			const left:int  = offsetLeft - 40;
			var   start:int = (bDescending ? 0 : ROWS - 1);

			for (var i:int = 0; i < ROWS; i++)
			{
				top = offsetTop + (i * _cellSize) - 6; 
				_addTextField("" + start, left, top, _lineColor, 12);
				if (bDescending) { start++; }
				else             { start--; }
			}
		}

		private function _drawHeaderColumn(offsetLeft:int, offsetTop:int, bDescending:Boolean) : void
		{
			const COLS:int  = 9;
			const top:int   = offsetTop - 45;
			var   left:int  = 0;
			var   start:int = (bDescending ? COLS - 1 : 0);

			for (var i:int = 0; i < COLS; i++)
			{
				left = offsetLeft + (i * _cellSize) - 6;
				_addTextField(String.fromCharCode(97 + start), left, top, _lineColor, 12);
				if (bDescending) { start--; }
				else             { start++; }
			}
		}

		private function _addTextField(text:String, x:Number, y:Number,
									   color:uint, fontSize:uint, font:String = "Verdana") : void
		{
			var label:Label = new Label();
			label.x = x;
			label.y = y;
			label.text = text;
			label.setStyle("color", color);
			label.setStyle("fontFamily", font);
			label.setStyle("fontSize", fontSize);

			this.addChild(label);
		}

		public function getNearestCell(x:int, y:int, radius:int):Position
		{
			trace("x: " + x + " y: " + y + ", mouse x: " + this.mouseX + " y: " + this.mouseY);
			var pos:Position = new Position(-1, -1);

			var yRow:int;
			for (var i:int = 0; i < 10; i++)
			{
				yRow = offset + _cellSize * i;
				if (Math.abs(this.mouseY - yRow) < radius)
				{
					pos.row = i;
					break;
				}
			}
			
			var xColumn:int;
			for (i = 0; i < 9; i++)
			{
				xColumn = offset + _cellSize * i;
				if (Math.abs(this.mouseX - xColumn) < radius)
				{
					pos.column = i;				
					break;
				}
			}

			return pos;
		}

		public function getX(col:int) : int { return offset + col * _cellSize; }
		public function getY(row:int) : int { return offset + row * _cellSize; }

		public function getViewPosition(pos:Position) : Position
		{
			return ( _topColor == "Black" // normal view?
					? new Position( pos.row, pos.column )
					: new Position( Math.abs(pos.row - 9), Math.abs(pos.column - 8) ) );
		}

		public function displayStatus(status:String) : void
		{
			// TODO: Need to properly center the text.
			_addTextField(status, this.getX(3), this.getY(4) + 10, 0x33CCFF, 18);
		}

		public function displayEmptyStatus() : void
		{
			// TODO: Need to properly center the text.
			_addTextField("Empty Table", this.getX(3), this.getY(4) + 10, 0x33CCFF, 24);
		}

		public function enablePieceEvents(color:String) : void
		{
			var pieces:Array = (color == "Red" ? _redPieces : _blackPieces);
			for each (var piece:Piece in pieces) {
				piece.enableEvents();
			}
		}

		public function disablePieceEvents(color:String) : void
		{
			var pieces:Array = (color == "Red" ? _redPieces : _blackPieces);
			for each (var piece:Piece in pieces) {
				piece.disableEvents();
			}	
		}

		public function changePiecesSkin(skinIndex:int) : void
		{
			_pieceSkin = skinIndex;

			var piece:Piece = null;
			for (var i:int = 0; i < 16; i++)
			{
				piece = _redPieces[i];
				if ( ! piece.isCaptured() ) {
					piece.changeSkinIndex(_pieceSkin);
				}
				piece = _blackPieces[i];
				if ( ! piece.isCaptured() ) {
					piece.changeSkinIndex(_pieceSkin);
				}
			}

			if (_lastPieceInFocus) {
				_lastPieceInFocus.setFocus();
			}
		}

		/* =================================================================
		 *
		 *   API migrated from the 'Game' class.
		 *
		 * ================================================================= */

		private function _resetInternalState() : void
		{
			// --- Initialize piece map.
            _pieceMap = new Array(10);
			for (var k:int = 0; k < 10; k++)
			{
				_pieceMap[k] = new Array(9);
				for (var m:int = 0; m < 9; m++)
				{
					_pieceMap[k][m] = null;
				}
			}

			_pieceMap[0][0] = _blackPieces[0];
			_pieceMap[0][1] = _blackPieces[1];
			_pieceMap[0][2] = _blackPieces[2];
			_pieceMap[0][3] = _blackPieces[3];
			_pieceMap[0][4] = _blackPieces[4];
			_pieceMap[0][5] = _blackPieces[5];
			_pieceMap[0][6] = _blackPieces[6];
			_pieceMap[0][7] = _blackPieces[7];
			_pieceMap[0][8] = _blackPieces[8];
			_pieceMap[2][1] = _blackPieces[9];
			_pieceMap[2][7] = _blackPieces[10];
			for (var pawn:int = 0; pawn < 5; pawn++) {
	        	_pieceMap[3][2*pawn] = _blackPieces[11 + pawn];
			}

			_pieceMap[9][0] = _redPieces[0];
			_pieceMap[9][1] = _redPieces[1];
			_pieceMap[9][2] = _redPieces[2];
			_pieceMap[9][3] = _redPieces[3];
			_pieceMap[9][4] = _redPieces[4];
			_pieceMap[9][5] = _redPieces[5];
			_pieceMap[9][6] = _redPieces[6];
			_pieceMap[9][7] = _redPieces[7];
			_pieceMap[9][8] = _redPieces[8];
			_pieceMap[7][1] = _redPieces[9];
			_pieceMap[7][7] = _redPieces[10];
			for (pawn = 0; pawn < 5; pawn++) {
	        	_pieceMap[6][2*pawn] = _redPieces[11 + pawn];
			}
		}

		/**
		 * Callback function when a local Piece is moved by human. 
		 */
		public function canLocalPieceMoveTo(piece:Piece, newPos:Position) : Boolean
		{
			if ( _isBoardInReviewMode() )
			{
				trace("Piece cannot be moved: In review mode");
				return false;
			}

			// Ask the Table (i.e., its Referee...).
			return _table.onLocalPieceMoved(piece, newPos);
		}

		public function doMove(color:String, oldPos:Position, newPos:Position, bCapturedMove:Boolean) : void
		{
			// Record the Move.
			const move:Object =
				{
					color    : color,
					oldRow   : oldPos.row,
					oldCol   : oldPos.column,
					newRow   : newPos.row,
					newCol   : newPos.column,
					captured : bCapturedMove
				};
			_historyMoves.push( move );
			
		    /* Do not update the Pieces on Board if we are in the review mode. */
		    if ( _isBoardInReviewMode() )
		    {
		        return;
		    }

		    /* Ask the core Board to perform the Move. */
			
			var piece:Piece = _pieceMap[oldPos.row][oldPos.column];
			var capture:Piece = _pieceMap[newPos.row][newPos.column];

			_pieceMap[newPos.row][newPos.column] = piece;
			_pieceMap[oldPos.row][oldPos.column] = null;

			if ( capture != null )
			{
				capture.setCapture(true);
				capture.removeImage();
				_captureStack.push( capture );
			}

			piece.setPosition(newPos);
			piece.moveImage();

			/* Set focus. */

			if (_lastPieceInFocus) {
				_lastPieceInFocus.clearFocus();
			}
			piece.setFocus();
			_lastPieceInFocus = piece;
		}

		public function DoGameReview_BEGIN() : Boolean
		{
		    while ( this.DoGameReview_PREV() ) { }
		    return true;
		}

		public function DoGameReview_PREV() : Boolean
		{
		    if ( _historyMoves.length == 0 )
		    {
		    	//trace("Review-PREV: No Moves made yet.")
		        return false;
		    }
		
		    if ( _historyIndex == HISTORY_INDEX_END ) // at the END mark?
		    {
		        // Get the latest move.
		        _historyIndex = _historyMoves.length - 1;
		    }
		    else if ( _historyIndex == HISTORY_INDEX_BEGIN )
		    {
		        //trace("Review-PREV: The index is already at BEGIN. Do nothing. END.");
		        return false;
		    }
		
		    var move:Object = _historyMoves[_historyIndex];
		
		    /* Move the piece back from NEW -> ORIGINAL position. */
		    
		    var piece:Piece = _pieceMap[move.newRow][move.newCol];

			piece.setPosition( new Position(move.oldRow, move.oldCol) );
			piece.moveImage();
			piece.clearFocus();

			_pieceMap[move.oldRow][move.oldCol] = piece;
			_pieceMap[move.newRow][move.newCol] = null;

			 /* Putback the captured piece, if any. */

			if ( move.captured == true )
			{
				// The capture must be at the top of the Move-Stack.
				var capture:Piece = _captureStack.pop();
				
				capture.setCapture(false);
				capture.draw(offset, _cellSize, _pieceSkin);
				_pieceMap[move.newRow][move.newCol] = capture;
			}
			
		    /* Highlight the Piece (if any) of the "next-PREV" Move. */
		
		    --_historyIndex;
		    if ( _historyIndex >= 0 )
		    {
		        move = _historyMoves[_historyIndex];
		        piece = _pieceMap[move.newRow][move.newCol];
				piece.setFocus();
				_lastPieceInFocus = piece;
		    }

		    return true;
		}

		public function DoGameReview_NEXT() : Boolean
		{
		    if ( _historyMoves.length == 0 )
		    {
		        //trace("Review-NEXT: No Moves made yet.")
		        return false;
		    }

		    if ( _historyIndex == HISTORY_INDEX_END ) // at the END mark?
		    {
		        //trace("Review-NEXT: No PREV done. Do nothing. END.");
		        return false;
		    }

		    ++_historyIndex;

		    var move:Object = _historyMoves[_historyIndex];
		
		    if ( _historyIndex == _historyMoves.length - 1 )
		    {
		        _historyIndex = HISTORY_INDEX_END;
		    }

		    /* Move the piece from ORIGINAL --> NEW position. */

		    var piece:Piece = _pieceMap[move.oldRow][move.oldCol];
			var capture:Piece = _pieceMap[move.newRow][move.newCol];
			if ( capture != null )
			{
				capture.setCapture(true);
				capture.removeImage();
				_captureStack.push( capture );
			}

			piece.setPosition( new Position(move.newRow, move.newCol) );
			piece.moveImage();

			_pieceMap[move.newRow][move.newCol] = piece;
			_pieceMap[move.oldRow][move.oldCol] = null;

			if ( _lastPieceInFocus ) {
				_lastPieceInFocus.clearFocus();
			}
			piece.setFocus();
			_lastPieceInFocus = piece;

			return true;
		}

		public function DoGameReview_END() : Boolean
		{
		    while ( this.DoGameReview_NEXT() ) { }
		    return true;
		}

		private function _isBoardInReviewMode() : Boolean
		{
		    return ( _historyIndex != HISTORY_INDEX_END );
		}

	]]>
</mx:Script>
	
</mx:Canvas>
